// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const insertOneCategory = `-- name: InsertOneCategory :exec
INSERT INTO Categories(Id, Description, Name) Values (?, ?, ?)
`

type InsertOneCategoryParams struct {
	ID          string
	Description sql.NullString
	Name        string
}

func (q *Queries) InsertOneCategory(ctx context.Context, arg InsertOneCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertOneCategory, arg.ID, arg.Description, arg.Name)
	return err
}

const queryAllCategories = `-- name: QueryAllCategories :many
SELECT id, description, name FROM Categories
`

func (q *Queries) QueryAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, queryAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Description, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryOneCategory = `-- name: QueryOneCategory :one
SELECT id, description, name FROM Categories WHERE Name = ? LIMIT 1
`

func (q *Queries) QueryOneCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, queryOneCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}
